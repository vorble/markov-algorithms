# counter.py
#
# This script implements a Markov algorithm which counts the number of dots.
# Input is given as an argument to the script on the command line:
#
#   python3 addition.py ...............
#
# where the input must be of the form:
#
# * A sequence of dots.

import sys
import re
import markov

# Steps are backwards. Totals exceeding 9 are indicated with the letter A,
# indicating the carry.
rules = [
    # Perform carry when needed.
    ('0A', '10'),
    ('1A', '20'),
    ('2A', '30'),
    ('3A', '40'),
    ('4A', '50'),
    ('5A', '60'),
    ('6A', '70'),
    ('7A', '80'),
    ('8A', '90'),
    ('9A', 'A0'),
    ('A', '10'),

    # Step 2 - Add more dots to the running total.
    ('0..........', 'A'),
    ('0.........', '9'),
    ('0........', '8'),
    ('0.......', '7'),
    ('0......', '6'),
    ('0.....', '5'),
    ('0....', '4'),
    ('0...', '3'),
    ('0..', '2'),
    ('0.', '1'),
    ('1.........', 'A'),
    ('1........', '9'),
    ('1.......', '8'),
    ('1......', '7'),
    ('1.....', '6'),
    ('1....', '5'),
    ('1...', '4'),
    ('1..', '3'),
    ('1.', '2'),
    ('2........', 'A'),
    ('2.......', '9'),
    ('2......', '8'),
    ('2.....', '7'),
    ('2....', '6'),
    ('2...', '5'),
    ('2..', '4'),
    ('2.', '3'),
    ('3.......', 'A'),
    ('3......', '9'),
    ('3.....', '8'),
    ('3....', '7'),
    ('3...', '6'),
    ('3..', '5'),
    ('3.', '4'),
    ('4......', 'A'),
    ('4.....', '9'),
    ('4....', '8'),
    ('4...', '7'),
    ('4..', '6'),
    ('4.', '5'),
    ('5.....', 'A'),
    ('5....', '9'),
    ('5...', '8'),
    ('5..', '7'),
    ('5.', '6'),
    ('6....', 'A'),
    ('6...', '9'),
    ('6..', '8'),
    ('6.', '7'),
    ('7...', 'A'),
    ('7..', '9'),
    ('7.', '8'),
    ('8..', 'A'),
    ('8.', '9'),
    ('9.', 'A'),

    # Step 1 - Start by counting dots.
    ('..........', 'A'),
    ('.........', '9'),
    ('........', '8'),
    ('.......', '7'),
    ('......', '6'),
    ('.....', '5'),
    ('....', '4'),
    ('...', '3'),
    ('..', '2'),
    ('.', '1'),
]

for data in sys.argv[1:]:
    if re.compile('^\.+$').match(data):
        markov.animate(rules, data)
    else:
        print('Bad Input: ' + data)
    print()
